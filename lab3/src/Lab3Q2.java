import com.jogamp.opengl.*;import com.jogamp.opengl.awt.GLJPanel;import com.jogamp.opengl.glu.GLU;import com.jogamp.opengl.util.FPSAnimator;import com.jogamp.opengl.util.gl2.GLUT;import com.jogamp.opengl.util.texture.Texture;import com.jogamp.opengl.util.texture.TextureIO;import javax.swing.*;import java.awt.*;import java.io.File;import java.io.IOException;public class Lab3Q2 implements GLEventListener {	/**	 * ScreenSaverOGL - this is a simple screen saver that uses JOGL 	 * Eric McCreath 2009,2011,2017,2019	 * Xiran Yan u7167582	 * change the version of jogl jar to the lastest one(2.4.0),because of the old one have bug with macos.	 *	 * You need to include the jogl jar files (gluegen2-rt.jar and jogl2.jar). In	 * eclipse use "add external jars" in Project->Properties->Java Build Path->Libraries	 * otherwise make certain they are in the class path.  In the current linux          * computers there files are in the /usr/share/java directory.	 *          * If you are executing from the command line then something like:         *   javac -cp .:/usr/share/java/jogl2.jar:/usr/share/java/gluegen2-rt.jar ScreenSaverOGL.java         *   java -cp .:/usr/share/java/jogl2.jar:/usr/share/java/gluegen2-rt.jar ScreenSaverOGL         * should work.         * 	 * You may also need set up the LD_LIBRARY_PATH environment variable. It should point to a	 * directory that contains: libgluegen-rt.so, libjogl_cg.so, libjogl_awt.so,	 * and libjogl.so. In eclipse this can be done in the "Run Configurations.."	 * by adding an environment variable.  In the current linux set up th LD_LIBRARY_PATH     * does not need to change.     *      * I found java 11 to work rather than java 8.      * it is at /usr/lib/jvm/java-11-openjdk-amd64	 *  	 */	JFrame jf;	//GLCanvas canvas;	//GLCapabilities caps;	GLJPanel gljpanel;	Dimension dim = new Dimension(800, 600);	FPSAnimator animator;	Texture texture;	float xpos = 0.0f;	float xvel = 1.0f;	float imagesize=400;			// set up the OpenGL Panel within a JFrame	public Lab3Q2() {		jf = new JFrame();		gljpanel = new GLJPanel();		gljpanel.addGLEventListener(this);        gljpanel.requestFocusInWindow();		jf.getContentPane().add(gljpanel);		jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		jf.setVisible(true);		jf.setPreferredSize(dim);		jf.setResizable(false);		jf.pack();		animator = new FPSAnimator(gljpanel, 20);		animator.start();	}	public static void main(String[] args) {		new Lab3Q2();	}	public void display(GLAutoDrawable dr) {		GL2 gl = (GL2) dr.getGL();		GLU glu = new GLU();		GLUT glut = new GLUT();		// clear the screen		gl.glClear(GL.GL_COLOR_BUFFER_BIT);		// draw the chessimage as a texture on a square polygon and size is imagesize=400		gl.glPushMatrix();		//rotate the texture by center pos		gl.glTranslatef((float) (dim.getWidth())/2,(float) (dim.getHeight())/2,0);		gl.glRotatef(xpos,0,0,1);		gl.glTranslatef((float) -(dim.getWidth())/2,(float) -(dim.getHeight())/2,0);		//move to center		gl.glTranslatef((float) (dim.getWidth()-imagesize)/2,(float) (dim.getHeight()-imagesize)/2,0);		//bind to texture with gl		texture.bind(gl);		gl.glEnable(GL2.GL_TEXTURE_2D);		//draw the square polygon		gl.glBegin(GL2.GL_POLYGON);		//draw the leftbottom texture point to leftbottom vertex		gl.glTexCoord2d(0.0,0.0);		gl.glVertex2d(0.0,0.0);		//draw the leftup texture point to leftup vertex		gl.glTexCoord2d(1.0,0.0);		gl.glVertex2d(imagesize,0.0);		//draw the rightup  texture point to rightup vertex		gl.glTexCoord2d(1.0,1.0);		gl.glVertex2d(imagesize,imagesize);		//draw the rightbottom texture point to rightbottom vertex		gl.glTexCoord2d(0.0,1.0);		gl.glVertex2d(0.0,imagesize);		gl.glEnd();		gl.glDisable(GL2.GL_TEXTURE_2D);		gl.glPopMatrix();		gl.glFlush();		//chang the rotate index		xpos += xvel;		if (xpos > 360)			xpos = 0.0f;	}		public void displayChanged(GLAutoDrawable dr, boolean arg1, boolean arg2) {	}		// init - set up the opengl context	public void init(GLAutoDrawable dr) {		GL2 gl = dr.getGL().getGL2();		GLU glu = new GLU();		GLUT glut = new GLUT();		// make the clear colour green		gl.glClearColor(0.0f, 1.0f, 0.0f, 0.0f);						// set the projection matrix to a simple Orthogonal 2D mapping		gl.glMatrixMode(GL2.GL_PROJECTION);		gl.glLoadIdentity();		glu.gluOrtho2D(0.0, dim.getWidth(), 0.0, dim.getHeight());				// any transformation that we do from hear on in will be on the model-view matrix        gl.glMatrixMode(GL2.GL_MODELVIEW);		gl.glLoadIdentity();		File file=new File("../");		System.out.println(file.getAbsolutePath());		//load the image to texture		try {			texture = TextureIO.newTexture(new File("lab3/src/chessimage.png"), true );			texture.enable(gl);		} catch (GLException | IOException e) {			e.printStackTrace();		}	}	public void reshape(GLAutoDrawable dr, int arg1, int arg2, int arg3,			int arg4) {	}	@Override	public void dispose(GLAutoDrawable arg0) {		}}