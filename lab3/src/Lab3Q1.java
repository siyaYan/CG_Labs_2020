import java.awt.Dimension;import javax.swing.JFrame;import com.jogamp.opengl.GL;import com.jogamp.opengl.GL2;import com.jogamp.opengl.GLAutoDrawable;import com.jogamp.opengl.GLEventListener;import com.jogamp.opengl.awt.GLJPanel;import com.jogamp.opengl.glu.GLU;import com.jogamp.opengl.util.FPSAnimator;import com.jogamp.opengl.util.gl2.GLUT;public class Lab3Q1 implements GLEventListener {	/**	 * ScreenSaverOGL - this is a simple screen saver that uses JOGL 	 * Eric McCreath 2009,2011,2017,2019	 * Xiran Yan u7167582	 * change the version of jogl jar to the lastest one(2.4.0),because of the old one have bug with macos.	 *	 * You need to include the jogl jar files (gluegen2-rt.jar and jogl2.jar). In	 * eclipse use "add external jars" in Project->Properties->Java Build Path->Libraries	 * otherwise make certain they are in the class path.  In the current linux          * computers there files are in the /usr/share/java directory.	 *          * If you are executing from the command line then something like:         *   javac -cp .:/usr/share/java/jogl2.jar:/usr/share/java/gluegen2-rt.jar ScreenSaverOGL.java         *   java -cp .:/usr/share/java/jogl2.jar:/usr/share/java/gluegen2-rt.jar ScreenSaverOGL         * should work.         * 	 * You may also need set up the LD_LIBRARY_PATH environment variable. It should point to a	 * directory that contains: libgluegen-rt.so, libjogl_cg.so, libjogl_awt.so,	 * and libjogl.so. In eclipse this can be done in the "Run Configurations.."	 * by adding an environment variable.  In the current linux set up th LD_LIBRARY_PATH     * does not need to change.     *      * I found java 11 to work rather than java 8.      * it is at /usr/lib/jvm/java-11-openjdk-amd64	 *  	 */	JFrame jf;	GLJPanel gljpanel;	Dimension dim = new Dimension(800, 600);	FPSAnimator animator;	float step= 50;	// set up the OpenGL Panel within a JFrame	public Lab3Q1() {		jf = new JFrame();		gljpanel = new GLJPanel();		gljpanel.addGLEventListener(this);        gljpanel.requestFocusInWindow();		jf.getContentPane().add(gljpanel);		jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		jf.setVisible(true);		jf.setPreferredSize(dim);		jf.setResizable(false);		jf.pack();		animator = new FPSAnimator(gljpanel, 20);		animator.start();	}	/*Xiran Yan u7167582*/	private void drawSquare(GL2 gl) {		gl.glPushMatrix();		for (float j = 1; j <= 8; j++) {			//if it's even line, it will rotate form the center of the line			if (j % 2 == 0) {				//move to line center				gl.glTranslated(4*step, step/2, 0.0);				//rotate				gl.glRotatef(180,0,0,1);				//move to start point of each line drawing				gl.glTranslated(-4*step, -step/2, 0.0);			}			//draw one line for chess board			for(float i = 1; i <= 4; i++) {				//every black nad white are one combination,so draw one line need 4 times loop				//black square				gl.glColor3f(0.0f, 0.0f, 0.0f);				gl.glBegin(GL2.GL_POLYGON);				gl.glVertex2d(0.0, 0.0);				gl.glVertex2d(0.0, 50.0);				gl.glVertex2d(50.0, 50.0);				gl.glVertex2d(50.0, 0.0);				gl.glVertex2d(0.0, 0.0);				gl.glEnd();				//white square				gl.glColor3f(1.0f, 1.0f, 1.0f);				gl.glBegin(GL2.GL_POLYGON);				gl.glVertex2d(50.0, 0.0);				gl.glVertex2d(50.0, 50.0);				gl.glVertex2d(100.0, 50.0);				gl.glVertex2d(100.0, 0.0);				gl.glVertex2d(50.0, 0.0);				gl.glEnd();				//move to next pos				gl.glTranslated( 2*step, 0, 0.0);			}			//after finish need rotate back to original state			if (j % 2 == 0) {				//move to center(from 8*step because the last square drawing stop at the 8*step pos)				gl.glTranslated(-4 * step, step / 2, 0.0);				//rotate back				gl.glRotatef(180, 0, 0, 1);				//back to the start point for next line				gl.glTranslated(-4 * step, step / 2, 0.0);			} else {				//odd line never have been rotate, so just move to the start point of next line				gl.glTranslated( -8*step, step, 0.0);			}		}		gl.glPopMatrix();	}	public static void main(String[] args) {		new Lab3Q1();	}	public void display(GLAutoDrawable dr) {		GL2 gl = (GL2) dr.getGL();		GLU glu = new GLU();		GLUT glut = new GLUT();		// clear the screen		gl.glClear(GL.GL_COLOR_BUFFER_BIT);		gl.glColor3f(0.0f, 0.0f, 0.0f);		drawSquare(gl);	}		public void displayChanged(GLAutoDrawable dr, boolean arg1, boolean arg2) {	}		// init - set up the opengl context	public void init(GLAutoDrawable dr) {		GL2 gl = dr.getGL().getGL2();		GLU glu = new GLU();		GLUT glut = new GLUT();		// make the clear colour blue		gl.glClearColor(0.0f,0.0f,1.0f,1.0f);						// set the projection matrix to a simple Orthogonal 2D mapping		gl.glMatrixMode(GL2.GL_PROJECTION);		glu.gluOrtho2D(0.0, dim.getWidth(), 0.0, dim.getHeight());				// any transformation that we do from hear on in will be on the model-view matrix        gl.glMatrixMode(GL2.GL_MODELVIEW);	}	public void reshape(GLAutoDrawable dr, int arg1, int arg2, int arg3,			int arg4) {	}	@Override	public void dispose(GLAutoDrawable arg0) {		}}